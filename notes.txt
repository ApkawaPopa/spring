lesson4

Через сеттеры внедряется зависимость с помощью тега property с указанием name=имя поля и value=значение поля
values будем брать из файла *.properties, предварительно импортировав его в applicationContext с помощью тега <context:property-placeholder location="classpath:...">

При создании бина спринг сам ищет нужный конструктор в зависимости от внутренних <constructor-arg>

В property name=.. поиск ведется по сеттеру set..., где ... в camelCase'е

Надо создать в плеере две зависимости name и volume, внедрить все три зависимости с помощью property

Создать musicPlayer.properties и указать там name=...
volume=...

Нужно изменить плеер так, чтобы он мог проигрывать сразу много музыкальных жанров, то есть список
Потом внедрить все музыкальные жанры в плеер с помощью внедрения списка бинов

Можно передать лист бинов сразу через
<property/constructor-arg>
    <list>
        <ref="bean1">
        <ref="bean2">
        ...
    </list>
</...>

А можно как я сделал, тогда создается отдельный бин под лист

Выключил Inline completion


lesson5

Ставим scope=singleton для musicPlayer и убеждаемся, что они равны в TestSpring
То есть сравним ссылки и посмотрим, что будет при изменении громкости в одном из объектов
Затем ставим scope=prototype и смотрим, что ссылки теперь разные и что громкость меняется не в обеих переменных