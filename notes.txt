lesson4

Через сеттеры внедряется зависимость с помощью тега property с указанием name=имя поля и value=значение поля
values будем брать из файла *.properties, предварительно импортировав его в applicationContext с помощью тега <context:property-placeholder location="classpath:...">

При создании бина спринг сам ищет нужный конструктор в зависимости от внутренних <constructor-arg>

В property name=.. поиск ведется по сеттеру set..., где ... в camelCase'е

Надо создать в плеере две зависимости name и volume, внедрить все три зависимости с помощью property

Создать musicPlayer.properties и указать там name=...
volume=...

Нужно изменить плеер так, чтобы он мог проигрывать сразу много музыкальных жанров, то есть список
Потом внедрить все музыкальные жанры в плеер с помощью внедрения списка бинов

Можно передать лист бинов сразу через
<property/constructor-arg>
    <list>
        <ref="bean1">
        <ref="bean2">
        ...
    </list>
</...>

А можно как я сделал, тогда создается отдельный бин под лист

Выключил Inline completion


lesson5

Ставим scope=singleton для musicPlayer и убеждаемся, что они равны в TestSpring
То есть сравним ссылки и посмотрим, что будет при изменении громкости в одном из объектов
Затем ставим scope=prototype и смотрим, что ссылки теперь разные и что громкость меняется не в обеих переменных


lesson6

Добавим init-method и destroy-method в каком-то жанре музыки
В контексте с бинами для этого бина пропишем названия этих методов в init-method и destroy-method
Проверим, что init вызывается при создании бина, а точнее при создании контекста
Проверим, что дестрой вызывается при закрытии контекста, то есть при уничтожении бина

Модификатор доступа у этих методов может быть любой
Возвращаться может что угодно, но спринг все равно не будет это использовать
Входных аргументов у них быть не должно

У scope=prototype бинов не вызывается destroy-method
Спринг отдает бины клиенту и больше о них не заботится

Задание: посмотреть, вызывается ли дестрой метод у прототип бинов и посмотреть, сколько раз вызовется инит метод при создании нескольких прототип бинов

Первый инит вызывается при создании контекста у прототайпа, а дальше по мере вызова getBean()

factory-method:
    есть абстрактный класс Creator, который содержит всю бизнес логику обработки объекта, кроме реализации метода для создания экземпляра объекта
    при этом метод создания объекта абстрактный и возвращает интерфейс объектов, которые будут в итоге обработаны
    для каждого конкретного типа объекта мы создаем отдельные фабрики, в которых переопределяем метод создания объекта со всеми особенностями этого типа

Задание: создать фабричный метод в каком-то жанре и указать соответствующему бину называние этого метода через factory-method

Несмотря на то, что у нас будет фабричный метод, он все еще вызовется единственный раз при вызове getBean, если у нас scope=Singleton